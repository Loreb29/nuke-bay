plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    modImplementation("curse.maven:alexs-caves-924854:5633305")
    modImplementation("curse.maven:immersive-aircraft-666014:5713366")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}


components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

// Update mods.toml with the new versions automatically
// Not using processResources because it is easier to do this manually, and see it reflected immediately
afterEvaluate {
    file("src/main/resources/META-INF/mods.toml").withOutputStream {
        it << file("mods.toml").text
                .replaceAll("@LOADER_MAJOR@", rootProject.forge_version.split("\\.")[0])
                .replaceAll("@MINECRAFT_VERSION@", rootProject.architectury.minecraft)
                .replaceAll("@FORGE_VERSION@", rootProject.forge_version)
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            groupId = rootProject.group_id
            version = version + "+forge"
            from components.java
        }
    }
}
